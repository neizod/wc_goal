#!/usr/bin/env python3

import re
import os
import glob
import yaml
import datetime
from collections import defaultdict

from pythainlp import word_tokenize     # pip install pythainlp

from lib import markdown


class Article(object):
    EXTRACT_DATE = r'/([0-9]{4})-([0-9]{2})-([0-9]{2})-(.*)\.md'
    MARKDOWN = markdown.Markdown(markdown.StripMarkdownRenderer())

    def __init__(self, filename):
        self.filename = filename
        self.get_content()
        self.get_meta()
        self.get_stats()

    def get_content(self):
        filecontent = markdown.frontmatter.load(open(self.filename))
        self.content = self.MARKDOWN.render(filecontent.content)

    def get_meta(self):
        year, month, day, title = re.findall(self.EXTRACT_DATE, self.filename)[0]
        self.year = int(year)
        self.month = int(month)
        self.day = int(day)
        self.week = datetime.date(self.year, self.month, self.day).isocalendar()[1]
        self.title = title

    def get_stats(self):
        self.number_chars = len(self.content)
        self.number_words = len(word_tokenize(self.content))


class WriterGoal(object):
    BLOCK_CHAR = '\u2592'

    def __init__(self):
        self.load_config()
        self.articles = {}
        self.analyse()

    def load_config(self):
        # let python handle ioerror by themselves, for now
        self.config = yaml.load(open('config.yml'))

    def iter_files(self):
        for pattern in self.config['watch']:
            yield from glob.iglob(os.path.expanduser(pattern))

    def analyse(self):
        for filename in self.iter_files():
            if filename not in self.articles:
                self.articles[filename] = Article(filename)

    def make_report(self):
        for criteria in self.config['report']:
            report_criteria = 'report_' + criteria.lower().replace(' ', '_')
            getattr(self, report_criteria)()

    def report_per_article(self):
        memo = defaultdict(int)
        for article in self.articles.values():
            memo[article.year,article.month,article.day,article.title] += article.number_words
        hi = max(value for value in memo.values())
        print(f'year | {"article title":^30} | {"wc":^6} | {"hist":^30}')
        print(f'---- | {       "-"*30      } | { "-"*6 } | {  "-"*30  }')
        for (year, _, _, title), freq in sorted(memo.items()):
            hist = round(30*freq/hi)
            print(f'{year} | {title[:30]:<30} | {freq:>6} | {self.BLOCK_CHAR*hist}')
        print()

    def report_per_year(self):
        memo = defaultdict(int)
        for article in self.articles.values():
            memo[article.year] += article.number_words
        hi = max(value for value in memo.values())
        print(f'year | {"wc":^6} | {"hist":^30}')
        print(f'---- | { "-"*6 } | {  "-"*30  }')
        for year, freq in sorted(memo.items()):
            hist = round(30*freq/hi)
            print(f'{year} | {freq:>6} | {self.BLOCK_CHAR*hist}')
        print()

    def report_per_month_of_year(self):
        memo = defaultdict(int)
        for article in self.articles.values():
            memo[article.year,article.month] += article.number_words
        hi = max(value for value in memo.values())
        print(f'yyyy-mm | {"wc":^6} | {"hist":^30}')
        print(f'------- | { "-"*6 } | {  "-"*30  }')
        for (year, month), freq in sorted(memo.items()):
            hist = round(30*freq/hi)
            print(f'{year}-{month:02} | {freq:>6} | {self.BLOCK_CHAR*hist}')
        print()

    def report_per_week_of_year(self):
        memo = defaultdict(int)
        for article in self.articles.values():
            memo[article.year,article.week] += article.number_words
        hi = max(value for value in memo.values())
        print(f'yyyy-ww | {"wc":^6} | {"hist":^30}')
        print(f'------- | { "-"*6 } | {  "-"*30  }')
        for (year, week), freq in sorted(memo.items()):
            hist = round(30*freq/hi)
            print(f'{year}-{week:02} | {freq:>6} | {self.BLOCK_CHAR*hist}')
        print()


def main():
    writer_goal = WriterGoal()
    writer_goal.make_report()


if __name__ == '__main__':
    main()
